// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: animal.proto

package prt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnimalClient is the client API for Animal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnimalClient interface {
	//定义方法
	Name(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponce, error)
	Food(ctx context.Context, in *FoodRequest, opts ...grpc.CallOption) (*FoodResponce, error)
}

type animalClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimalClient(cc grpc.ClientConnInterface) AnimalClient {
	return &animalClient{cc}
}

func (c *animalClient) Name(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponce, error) {
	out := new(NameResponce)
	err := c.cc.Invoke(ctx, "/Animal/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animalClient) Food(ctx context.Context, in *FoodRequest, opts ...grpc.CallOption) (*FoodResponce, error) {
	out := new(FoodResponce)
	err := c.cc.Invoke(ctx, "/Animal/Food", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnimalServer is the server API for Animal service.
// All implementations must embed UnimplementedAnimalServer
// for forward compatibility
type AnimalServer interface {
	//定义方法
	Name(context.Context, *NameRequest) (*NameResponce, error)
	Food(context.Context, *FoodRequest) (*FoodResponce, error)
	mustEmbedUnimplementedAnimalServer()
}

// UnimplementedAnimalServer must be embedded to have forward compatible implementations.
type UnimplementedAnimalServer struct {
}

func (UnimplementedAnimalServer) Name(context.Context, *NameRequest) (*NameResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedAnimalServer) Food(context.Context, *FoodRequest) (*FoodResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Food not implemented")
}
func (UnimplementedAnimalServer) mustEmbedUnimplementedAnimalServer() {}

// UnsafeAnimalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimalServer will
// result in compilation errors.
type UnsafeAnimalServer interface {
	mustEmbedUnimplementedAnimalServer()
}

func RegisterAnimalServer(s grpc.ServiceRegistrar, srv AnimalServer) {
	s.RegisterService(&Animal_ServiceDesc, srv)
}

func _Animal_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Animal/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalServer).Name(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Animal_Food_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalServer).Food(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Animal/Food",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalServer).Food(ctx, req.(*FoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Animal_ServiceDesc is the grpc.ServiceDesc for Animal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Animal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Animal",
	HandlerType: (*AnimalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Name",
			Handler:    _Animal_Name_Handler,
		},
		{
			MethodName: "Food",
			Handler:    _Animal_Food_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "animal.proto",
}
